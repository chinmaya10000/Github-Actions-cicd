name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - kubernetes/**
      - README.md
  pull_request:
    branches: [ "main" ]

jobs:

  gitleaks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup GitLeaks
      uses: gitleaks/gitleaks-action@v2

    - name: Run GitLeaks
      run: gitleaks detect --verbose --source . -f json -r gitleaks.json
    
    - name: Upload GitLeaks Report
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-report
        path: gitleaks.json
    

  build:
    runs-on: label-1
    needs: gitleaks

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven
      

    - name: Build and Unit Test
      run: mvn clean verify

    - name: Upload Target Directory
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
    
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: target/surefire-reports/*.xml

  sonarqube:
    runs-on: label-1
    needs: build

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Restore Target Directory
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target/

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
    
    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  docker:
    name: Build & Push Docker Image
    runs-on: label-1
    needs: sonarqube

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image_tag: ${{ steps.set_output.outputs.image_tag }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry 
      uses: docker/login-action@v3
      with: 
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=sha,format=long
          latest
    
    - name: Build Docker Image 
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true 
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL'
        output: trivy.json
        color: 'always'
      
    - name: Upload Trivy vulnerability scanner results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy.json
      
    - name: Push Docker Image 
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true 
      
    - name: Set Image Tag output 
      id: set_output 
      run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

















# sudo dnf install -y icu
